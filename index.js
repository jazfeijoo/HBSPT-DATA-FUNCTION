let input = {
    "events": [
         {
             "url": "/pages/a-big-river",
             "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
             "timestamp": 1512754583000
         },
         {
             "url": "/pages/a-small-dog",
             "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
             "timestamp": 1512754631000
         },
        {
            "url": "/pages/a-big-talk",
            "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
            "timestamp": 1512709065294
        },
        {
            "url": "/pages/a-sad-story",
            "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
            "timestamp": 1512711000000
        },
        {
            "url": "/pages/a-big-river",
            "visitorId": "d1177368-2310-11e8-9e2a-9b860a0d9039",
            "timestamp": 1512754436000
        },
        {
            "url": "/pages/a-sad-story",
            "visitorId": "f877b96c-9969-4abc-bbe2-54b17d030f8b",
            "timestamp": 1512709024000
        }
    ]
}

//FUNCTION - PROCESS DATA: 
// You're in charge of implementing a new analytics "sessions" view. 
// You're given a set of data that consists of individual web page visits, 
// along with a visitorId which is generated by a tracking cookie that uniquely identifies each visitor. 
// From this data we need to generate a list of sessions for each visitor.
// Given this input data, we want to create a set of sessions of the incoming data. 
// A sessions is defined as a group of events from a single visitor with no more than 10 minutes between each consecutive event. 
// A visitor can have multiple sessions.

function process (input){
    let events = input.events.sort((a,b) => {
        return a.timestamp - b.timestamp
    })
    let output = {}
    for (let i=0; i < events.length; i++){
        let currEvent = events[i]
        let currUrl = currEvent.url
        let currId = currEvent.visitorId
        let currTimeStamp = currEvent.timestamp
        let currMinutes = new Date(currTimeStamp).getMinutes()
        if (!output[currId]){
            output[currId] = [
                {
                    "duration": 0,
                    "pages": [currUrl],
                    "startTime": currTimeStamp
                }
            ]
        } else {
            let sessions = output[currId]
            let addNew = true
            console.log('MINUTES TO ADD:', currMinutes, 'ID: ',currId)
            for (let i=0; i< sessions.length; i++){
                let session = sessions[i]
                let sessionStartMin = new Date(session.startTime).getMinutes()
                let sessionEndMin = new Date (session.startTime + session.duration).getMinutes()
                console.log('SESSIONS SEARCHING THORUHG', sessionStartMin, session.startTime, session.duration)
                if (Math.abs(sessionStartMin - currMinutes) <= 10 || Math.abs(sessionEndMin - currMinutes) <= 10){
                    console.log('MINUTES ADDED TO EXISTING SESS')
                    session.pages.push(currUrl)
                    if (currTimeStamp < session.startTime){
                        session.duration += Math.abs(session.startTime - currTimeStamp)
                        session.startTime = currTimeStamp
                    } 
                    if ( (session.startTime + session.duration) < currTimeStamp){
                        session.duration += Math.abs(currTimeStamp - session.startTime - session.duration)
                    }
                    addNew = false
                    
                }
            }
            if (addNew){
                sessions.push({
                    "duration": 0,
                    "pages": [currUrl],
                    "startTime": currTimeStamp
                })
            }
        }
    }
   console.log('OUTPUT: ',output)
    return output
}

process(input)